<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4444/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4444/" rel="alternate" type="text/html" /><updated>2022-10-04T09:41:48-04:00</updated><id>http://localhost:4444/feed.xml</id><title type="html">Introducción al Desarrollo de Sistemas</title><subtitle>A flexible Jekyll theme for your blog or site with a minimalist aesthetic.</subtitle><author><name>Michael Rose</name></author><entry><title type="html">Post: Future Date</title><link href="http://localhost:4444/post/post-future-date/" rel="alternate" type="text/html" title="Post: Future Date" /><published>9999-12-31T00:00:00-05:00</published><updated>9999-12-31T00:00:00-05:00</updated><id>http://localhost:4444/post/post-future-date</id><content type="html" xml:base="http://localhost:4444/post/post-future-date/">This post lives in the future and is dated {{ page.date | date: &quot;%c&quot; }}. When building Jekyll with the `--future` flag it should appear.</content><author><name>Michael Rose</name></author><category term="Post" /><summary type="html">This post lives in the future and is dated Fri Dec 31 00:00:00 9999. When building Jekyll with the --future flag it should appear.</summary></entry><entry><title type="html">Informe</title><link href="http://localhost:4444/post%20formats/informe/" rel="alternate" type="text/html" title="Informe" /><published>2022-10-01T00:00:00-04:00</published><updated>2022-10-01T00:00:00-04:00</updated><id>http://localhost:4444/post%20formats/informe</id><content type="html" xml:base="http://localhost:4444/post%20formats/informe/">Systems development is the process of taking a set of business requirements and, through a series of structured stages, translating these into an operational IT system. 

The stages vary according to the development approach being used – described more fully in Chapter 2, ‘Lifecycle types and their rationales’ – but typically would include the activities shown in Figure 1.1, including: a feasibility study, to see if the project is worthwhile ; requirements engineering to analyse the business need and specify the users’ requirements ; design of the system to meet the users’ needs ; development of the software needed to meet the requirements ; testing of the software ; implementation of the solution.
Ahmed, Tahir, et al. Developing Information Systems : Practical guidance for IT professionals, edited by James Cadle, BCS Learning &amp; Development Limited, 2014. ProQuest Ebook Central, http://ebookcentral.proquest.com/lib/bull-ebooks/detail.action?docID=1713962.</content><author><name>Michael Rose</name></author><category term="Post Formats" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">Systems development is the process of taking a set of business requirements and, through a series of structured stages, translating these into an operational IT system. The stages vary according to the development approach being used – described more fully in Chapter 2, ‘Lifecycle types and their rationales’ – but typically would include the activities shown in Figure 1.1, including: a feasibility study, to see if the project is worthwhile ; requirements engineering to analyse the business need and specify the users’ requirements ; design of the system to meet the users’ needs ; development of the software needed to meet the requirements ; testing of the software ; implementation of the solution. Ahmed, Tahir, et al. Developing Information Systems : Practical guidance for IT professionals, edited by James Cadle, BCS Learning &amp;amp; Development Limited, 2014. ProQuest Ebook Central, http://ebookcentral.proquest.com/lib/bull-ebooks/detail.action?docID=1713962.</summary></entry><entry><title type="html">Exclude Post from Search Index</title><link href="http://localhost:4444/jekyll/post-exclude-search/" rel="alternate" type="text/html" title="Exclude Post from Search Index" /><published>2017-11-28T00:00:00-05:00</published><updated>2018-02-19T08:06:00-05:00</updated><id>http://localhost:4444/jekyll/post-exclude-search</id><content type="html" xml:base="http://localhost:4444/jekyll/post-exclude-search/">This post should not appear in the search index because it has the following YAML Front Matter:

```yaml
search: false
```

**Note:** `search: false` only works to exclude posts when using Lunr as a search provider.
{: .notice--info}

To exclude files when using Algolia as a search provider add an array to `algolia.files_to_exclude` in your `_config.yml`. For more configuration options be sure to check their [full documentation](https://community.algolia.com/jekyll-algolia/options.html).

```yaml
algolia:
  # Exclude more files from indexing
  files_to_exclude:
    - index.html
    - index.md
    - excluded-file.html
    - _posts/2017-11-28-post-exclude-search.md
    - subdirectory/*.html
```</content><author><name>Michael Rose</name></author><category term="Jekyll" /><summary type="html">This post should not appear in the search index because it has the following YAML Front Matter:</summary></entry><entry><title type="html">Layout: Header Video</title><link href="http://localhost:4444/layout/uncategorized/layout-header-video/" rel="alternate" type="text/html" title="Layout: Header Video" /><published>2017-01-23T00:00:00-05:00</published><updated>2017-01-23T00:00:00-05:00</updated><id>http://localhost:4444/layout/uncategorized/layout-header-video</id><content type="html" xml:base="http://localhost:4444/layout/uncategorized/layout-header-video/">This post should display a **header with a responsive video**, if the theme supports it.

## Settings

| Parameter  | Required     | Description |
|----------  |---------     | ----------- |
| `id`       | **Required** | ID of the video |
| `provider` | **Required** | Hosting provider of the video, either `youtube` or `vimeo` |

### YouTube

To embed the following YouTube video at url `https://www.youtube.com/watch?v=-PVofD2A9t8` (long version) or `https://youtu.be/-PVofD2A9t8` (short version) into a post or page&apos;s main content you&apos;d use: 

```liquid
{% raw %}{% include video id=&quot;-PVofD2A9t8&quot; provider=&quot;youtube&quot; %}{% endraw %}
```

{% include video id=&quot;-PVofD2A9t8&quot; provider=&quot;youtube&quot; %}

To embed it as a video header you&apos;d use the following YAML Front Matter

```yaml
header:
  video:
    id: -PVofD2A9t8
    provider: youtube
```

### Vimeo

To embed the following Vimeo video at url `https://vimeo.com/212731897` into a post or page&apos;s main content you&apos;d use: 

```liquid
{% raw %}{% include video id=&quot;212731897&quot; provider=&quot;vimeo&quot; %}{% endraw %}
```

{% include video id=&quot;212731897&quot; provider=&quot;vimeo&quot; %}

To embed it as a video header you&apos;d use the following YAML Front Matter

```yaml
header:
  video:
    id: 212731897
    provider: vimeo
```</content><author><name>Michael Rose</name></author><category term="Layout" /><category term="Uncategorized" /><category term="video" /><category term="layout" /><summary type="html">This post should display a header with a responsive video, if the theme supports it.</summary></entry><entry><title type="html">Gemified Theme – Beta Release</title><link href="http://localhost:4444/jekyll/gemified-theme-beta/" rel="alternate" type="text/html" title="Gemified Theme – Beta Release" /><published>2016-10-06T00:00:00-04:00</published><updated>2018-03-20T16:01:04-04:00</updated><id>http://localhost:4444/jekyll/gemified-theme-beta</id><content type="html" xml:base="http://localhost:4444/jekyll/gemified-theme-beta/">Hot on the heels of Jekyll v3.3.0 is a beta release of Minimal Mistakes... as a gemified theme.

[`minimal-mistakes-jekyll`](https://rubygems.org/gems/minimal-mistakes-jekyll) can only be used with Jekyll proper. If you&apos;re hosting on GitHub Pages or using that gem the theme won&apos;t work. 3rd party themes haven&apos;t been white-listed so it&apos;s a no go for now.

Fine with all that? Great. Let&apos;s continue.

If you&apos;re migrating a site already using Minimal Mistakes and haven&apos;t customized any of the `_includes`, `_layouts`, `_sass` partials, or `assets` this should be quick and painless.

## Step 1: Remove Theme Files 

Remove `_includes`, `_layouts`, `_sass`, `assets` folders and files within. You won&apos;t need these anymore as they&apos;re bundled in the theme.

If you customized any of these then leave them alone and only remove the untouched ones. If setup correctly your modified versions should act as [overrides](http://jekyllrb.com/docs/themes/#overriding-theme-defaults) to the versions bundled with the theme.

## Step 2: Update `Gemfile`

Replace `gem &quot;github-pages` or `gem &quot;jekyll&quot;` with `gem &quot;jekyll&quot;, &quot;~&gt; 3.3.0&quot;`. You&apos;ll need the latest version of Jekyll[^update-jekyll] for Minimal Mistakes to work and load all of the /assets/ properly.

[^update-jekyll]: You could also run `bundle update jekyll` to update Jekyll.

Add the Minimal Mistakes theme gem: 

```ruby
gem &quot;minimal-mistakes-jekyll&quot;
```

When finished your `Gemfile` should look something like this:

```ruby
source &quot;https://rubygems.org&quot;

gem &quot;jekyll&quot;, &quot;~&gt; 3.3.0&quot;
gem &quot;minimal-mistakes-jekyll&quot;
```

## Step 3: Run Bundler

Run `bundle install` (or `bundle update` if you&apos;re updating an existing repo) to install/update Jekyll and the theme.

## Step 4: Install the Theme

Add `theme: &quot;minimal-mistakes-jekyll&quot;` to your `_config.yml` file.

If you&apos;re migrating from an existing Minimal Mistakes site you shouldn&apos;t have to change anything else after this. If it&apos;s a new site consult then docs to [properly config]({{ &quot;/docs/configuration/&quot; | relative_url }}).

**Please Note:** Paths for image headers, overlays, teasers, [galleries]({{ &quot;/docs/helpers/#gallery&quot; | relative_url }}), and [feature rows]({{ &quot;/docs/helpers/#feature-row&quot; | relative_url }}) have changed and now require a full path. Instead of just `image: filename.jpg` you&apos;ll need to use the full path eg: `image: assets/images/filename.jpg`. The preferred location is now `assets/images` but can be placed elsewhere or external hosted. This all applies for image references in `_config.yml` and `author.yml` as well.
{: .notice--danger}

## Step 5: `jekyll new` Tweaks

If this is a new site be sure to add the following files to `_data/` and customize as you see fit. There is currently no way of bundling them in with the theme, so be sure to consult the docs on how to properly use both.

- [`_data/ui-text.yml`](https://github.com/mmistakes/minimal-mistakes/blob/master/_data/ui-text.yml) - UI text [documentation]({{ &quot;/docs/ui-text/&quot; | relative_url }})
- [`_data/navigation.yml`](https://github.com/mmistakes/minimal-mistakes/blob/master/_data/navigation.yml) - navigation [documentation]({{ &quot;/docs/navigation/&quot; | relative_url }})

You&apos;ll also need to: 

- Replace `&lt;site root&gt;/index.html` with a modified [Minimal Mistakes `index.html`](https://github.com/mmistakes/minimal-mistakes/blob/master/index.html).
- Change `layout: post` in `_posts/0000-00-00-welcome-to-jekyll.markdown` to `layout: single`.
- Remove `about.md`, or at the very least change `layout: page` to `layout: single` and remove references to `icon-github.html` (or [copy to your `_includes`](https://github.com/jekyll/minima/tree/master/_includes) if using).

---

That&apos;s it! If all goes well running `bundle exec jekyll serve` should spin-up your site. If you encounter any bumps please file an issue on GitHub and make sure to indicate you&apos;re testing the pre-release Ruby gem version.

[File an issue](https://github.com/mmistakes/minimal-mistakes/issues/new){: .btn .btn--info .btn--large}

Thanks!</content><author><name>Michael Rose</name></author><category term="Jekyll" /><category term="update" /><summary type="html">Hot on the heels of Jekyll v3.3.0 is a beta release of Minimal Mistakes… as a gemified theme.</summary></entry><entry><title type="html">Gemified Theme – Alpha Release</title><link href="http://localhost:4444/jekyll/gemified-theme-alpha/" rel="alternate" type="text/html" title="Gemified Theme – Alpha Release" /><published>2016-09-21T00:00:00-04:00</published><updated>2018-03-20T16:00:58-04:00</updated><id>http://localhost:4444/jekyll/gemified-theme-alpha</id><content type="html" xml:base="http://localhost:4444/jekyll/gemified-theme-alpha/">Jekyll [themes distributed as Ruby gems](http://jekyllrb.com/docs/themes/) are finally here to make installing and upgrading much easier. Gone are the days of forking a repo just to &quot;install it&quot;. Or dealing with merge conflicts when pulling in upstream commits to &quot;upgrade it&quot;.

If you&apos;re interested in testing out Minimal Mistakes as a gemified theme read on. There are a few caveats though:

1. Support for a theme `assets` folder was recently [added to Jekyll core](https://github.com/jekyll/jekyll/pull/5364), but has yet to be released or rolled into the `github-pages` gem. Meaning you can&apos;t use Minimal Mistakes as a Ruby gem there just yet... locally served or self-hosted installs should be fine if you don&apos;t mind using a pre-release version of Jekyll. 
2. Windows users can&apos;t currently use themes packaged as gems due to a [bug with file paths](https://github.com/jekyll/jekyll/issues/5192) in Jekyll core. This is being worked on so hopefully a [fix is on the way](https://github.com/jekyll/jekyll/pull/5256) soon.

Fine with all that? Great. Let&apos;s continue.

If you&apos;re migrating a site already using Minimal Mistakes and haven&apos;t customized any of the `_includes`, `_layouts`, `_sass` partials, or `assets` this should be quick and painless.

## Step 1: Remove Theme Files 

Remove `_includes`, `_layouts`, `_sass`, `assets` folders and files within. You won&apos;t need these anymore as they&apos;re bundled in the theme.

If you customized any of these then leave them alone and only remove the untouched ones. If setup correctly your modified versions should act as [overrides](http://jekyllrb.com/docs/themes/#overriding-theme-defaults) to the versions bundled with the theme.

## Step 2: Update `Gemfile`

In order to test you&apos;ll need to install pre-release gems of Jekyll and Minimal Mistakes.

Start by replacing `gem &quot;github-pages&quot;` or `gem &quot;jekyll&quot;` with the following:

```ruby
gem &quot;jekyll&quot;, :git =&gt; &quot;https://github.com/jekyll/jekyll.git&quot;
```

Then add the pre-release Minimal Mistakes theme gem: 

```ruby
gem &quot;minimal-mistakes-jekyll&quot;, :git =&gt; &quot;https://github.com/mmistakes/minimal-mistakes.git&quot;, :branch =&gt; &quot;feature/theme-gem&quot;`
```

When finished your `Gemfile` should look something like this:

```ruby
source &quot;https://rubygems.org&quot;

gem &quot;jekyll&quot;, :git =&gt; &quot;https://github.com/jekyll/jekyll.git&quot;
gem &quot;minimal-mistakes-jekyll&quot;, :git =&gt; &quot;https://github.com/mmistakes/minimal-mistakes.git&quot;, :branch =&gt; &quot;feature/theme-gem&quot;

group :jekyll_plugins do
  # gem &quot;jekyll-archives&quot;
  gem &quot;jekyll-paginate&quot;
  gem &quot;jekyll-sitemap&quot;
  gem &quot;jekyll-gist&quot;
  gem &quot;jekyll-feed&quot;
end
```

## Step 3: Run Bundler

Run `bundle install` (or `bundle update` if you&apos;re updating an existing repo) to install the pre-release gems.

## Step 4: Install the Theme

Add `theme: &quot;minimal-mistakes-jekyll&quot;` to your `_config.yml` file.

If you&apos;re migrating from an existing Minimal Mistakes site you shouldn&apos;t have to change anything else after this. If it&apos;s a new site consult then docs to [properly config]({{ &quot;/docs/configuration/&quot; | relative_url }}).

**Please Note:** Paths for image headers, overlays, teasers, [galleries]({{ &quot;/docs/helpers/#gallery&quot; | relative_url }}), and [feature rows]({{ &quot;/docs/helpers/#feature-row&quot; | relative_url }}) have changed and now require a full path. Instead of just `image: filename.jpg` you&apos;ll need to use the full path eg: `image: assets/images/filename.jpg`. The preferred location is now `assets/images` but can be placed elsewhere or external hosted. This applies for image references in `_config.yml` and `author.yml`.
{: .notice--danger}

## Step 5: `jekyll new` Tweaks

If this is a new site be sure to add the following files to `_data/` and customize as you see fit. There is currently no way of bundling them in with the theme, so be sure to consult the docs on how to properly use both.

- [`_data/ui-text.yml`](https://github.com/mmistakes/minimal-mistakes/blob/master/_data/ui-text.yml) - UI text [documentation]({{ &quot;/docs/ui-text/&quot; | relative_url }})
- [`_data/navigation.yml`](https://github.com/mmistakes/minimal-mistakes/blob/master/_data/navigation.yml) - navigation [documentation]({{ &quot;/docs/navigation/&quot; | relative_url }})

You&apos;ll also need to: 

- Replace `&lt;site root&gt;/index.html` with a modified [Minimal Mistakes `index.html`](https://github.com/mmistakes/minimal-mistakes/blob/master/index.html).
- Change `layout: post` in `_posts/0000-00-00-welcome-to-jekyll.markdown` to `layout: single`.
- Remove `about.md`, or at the very least change `layout: page` to `layout: single` and remove references to `icon-github.html` (or [copy to your `_includes`](https://github.com/jekyll/minima/tree/master/_includes) if using).

---

That&apos;s it! If all goes well running `bundle exec jekyll serve` should spin-up your site. If you encounter any bumps please file an issue on GitHub and make sure to indicate you&apos;re testing the pre-release Ruby gem version.

[File an issue](https://github.com/mmistakes/minimal-mistakes/issues/new){: .btn .btn--info .btn--large}

Thanks!</content><author><name>Michael Rose</name></author><category term="Jekyll" /><category term="update" /><summary type="html">Jekyll themes distributed as Ruby gems are finally here to make installing and upgrading much easier. Gone are the days of forking a repo just to “install it”. Or dealing with merge conflicts when pulling in upstream commits to “upgrade it”.</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4444/jekyll/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2016-02-24T00:00:00-05:00</published><updated>2016-02-24T00:00:00-05:00</updated><id>http://localhost:4444/jekyll/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4444/jekyll/welcome-to-jekyll/">You&apos;ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

To add new posts, simply add a file in the `_posts` directory that follows the convention `YYYY-MM-DD-name-of-post.ext` and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:

```ruby
def print_hi(name)
  puts &quot;Hi, #{name}&quot;
end
print_hi(&apos;Tom&apos;)
#=&gt; prints &apos;Hi, Tom&apos; to STDOUT.
```

Check out the [Jekyll docs][jekyll-docs] for more info on how to get the most out of Jekyll. File all bugs/feature requests at [Jekyll&apos;s GitHub repo][jekyll-gh]. If you have questions, you can ask them on [Jekyll Talk][jekyll-talk].

[jekyll-docs]: http://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/</content><author><name>Michael Rose</name></author><category term="Jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Markup: Syntax Highlighting</title><link href="http://localhost:4444/markup-syntax-highlighting/" rel="alternate" type="text/html" title="Markup: Syntax Highlighting" /><published>2013-08-16T00:00:00-04:00</published><updated>2018-01-03T09:45:06-05:00</updated><id>http://localhost:4444/markup-syntax-highlighting</id><content type="html" xml:base="http://localhost:4444/markup-syntax-highlighting/">Syntax highlighting is a feature that displays source code, in different colors and fonts according to the category of terms. This feature facilitates writing in a structured language such as a programming language or a markup language as both structures and syntax errors are visually distinct. Highlighting does not affect the meaning of the text itself; it is intended only for human readers.[^1]

[^1]: &lt;http://en.wikipedia.org/wiki/Syntax_highlighting&gt;

### GFM Code Blocks

GitHub Flavored Markdown [fenced code blocks](https://help.github.com/articles/creating-and-highlighting-code-blocks/) are supported. To modify styling and highlight colors edit `/_sass/syntax.scss`.

```css
#container {
  float: left;
  margin: 0 -240px 0 0;
  width: 100%;
}
```

{% highlight scss %}
.highlight {
  margin: 0;
  padding: 1em;
  font-family: $monospace;
  font-size: $type-size-7;
  line-height: 1.8;
}
{% endhighlight %}

```html
{% raw %}&lt;nav class=&quot;pagination&quot; role=&quot;navigation&quot;&gt;
  {% if page.previous %}
    &lt;a href=&quot;{{ site.url }}{{ page.previous.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.previous.title }}&quot;&gt;Previous article&lt;/a&gt;
  {% endif %}
  {% if page.next %}
    &lt;a href=&quot;{{ site.url }}{{ page.next.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.next.title }}&quot;&gt;Next article&lt;/a&gt;
  {% endif %}
&lt;/nav&gt;&lt;!-- /.pagination --&gt;{% endraw %}
```

```ruby
module Jekyll
  class TagIndex &lt; Page
    def initialize(site, base, dir, tag)
      @site = site
      @base = base
      @dir = dir
      @name = &apos;index.html&apos;
      self.process(@name)
      self.read_yaml(File.join(base, &apos;_layouts&apos;), &apos;tag_index.html&apos;)
      self.data[&apos;tag&apos;] = tag
      tag_title_prefix = site.config[&apos;tag_title_prefix&apos;] || &apos;Tagged: &apos;
      tag_title_suffix = site.config[&apos;tag_title_suffix&apos;] || &apos;&amp;#8211;&apos;
      self.data[&apos;title&apos;] = &quot;#{tag_title_prefix}#{tag}&quot;
      self.data[&apos;description&apos;] = &quot;An archive of posts tagged #{tag}.&quot;
    end
  end
end
```

### Code Blocks in Lists

Indentation matters. Be sure the indent of the code block aligns with the first non-space character after the list item marker (e.g., `1.`). Usually this will mean indenting 3 spaces instead of 4.

1. Do step 1.
2. Now do this:
   
   ```ruby
   def print_hi(name)
     puts &quot;Hi, #{name}&quot;
   end
   print_hi(&apos;Tom&apos;)
   #=&gt; prints &apos;Hi, Tom&apos; to STDOUT.
   ```
        
3. Now you can do this.

### Jekyll Highlight Tag

An example of a code blocking using Jekyll&apos;s [`{% raw %}{% highlight %}{% endraw %}` tag](https://jekyllrb.com/docs/templates/#code-snippet-highlighting).

{% highlight javascript linenos %}
// &apos;gulp html&apos; -- does nothing
// &apos;gulp html --prod&apos; -- minifies and gzips HTML files for production
gulp.task(&apos;html&apos;, () =&gt; {
  return gulp.src(paths.siteFolderName + paths.htmlPattern)
    .pipe(when(argv.prod, htmlmin({
      removeComments: true,
      collapseWhitespace: true,
      collapseBooleanAttributes: false,
      removeAttributeQuotes: false,
      removeRedundantAttributes: false,
      minifyJS: true,
      minifyCSS: true
    })))
    .pipe(when(argv.prod, size({title: &apos;optimized HTML&apos;})))
    .pipe(when(argv.prod, gulp.dest(paths.siteFolderName)))
    .pipe(when(argv.prod, gzip({append: true})))
    .pipe(when(argv.prod, size({
      title: &apos;gzipped HTML&apos;,
      gzip: true
    })))
    .pipe(when(argv.prod, gulp.dest(paths.siteFolderName)))
});
{% endhighlight %}

{% highlight wl linenos %}
Module[{},
  Sqrt[2]
  4
]
{% endhighlight %}

### GitHub Gist Embed

An example of a Gist embed below.

&lt;script src=&quot;https://gist.github.com/mmistakes/77c68fbb07731a456805a7b473f47841.js&quot;&gt;&lt;/script&gt;</content><author><name>Michael Rose</name></author><category term="code" /><category term="syntax highlighting" /><summary type="html">Post displaying the various ways of highlighting code in Markdown.</summary></entry><entry><title type="html">Markup: Another Post with Images</title><link href="http://localhost:4444/markup-more-images/" rel="alternate" type="text/html" title="Markup: Another Post with Images" /><published>2013-05-22T00:00:00-04:00</published><updated>2013-05-22T00:00:00-04:00</updated><id>http://localhost:4444/markup-more-images</id><content type="html" xml:base="http://localhost:4444/markup-more-images/">Here are some examples of what a post with images might look like. If you want to display two or three images next to each other responsively use `figure` with the appropriate `class`. Each instance of `figure` is auto-numbered and displayed in the caption.

### Figures (for images or video)

#### One Up

&lt;figure&gt;
	&lt;a href=&quot;http://farm9.staticflickr.com/8426/7758832526_cc8f681e48_b.jpg&quot;&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8426/7758832526_cc8f681e48_c.jpg&quot;&gt;&lt;/a&gt;
	&lt;figcaption&gt;&lt;a href=&quot;http://www.flickr.com/photos/80901381@N04/7758832526/&quot; title=&quot;Morning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr&quot;&gt;Morning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.

#### Two Up

Apply the `half` class like so to display two images side by side that share the same caption.

```html
&lt;figure class=&quot;half&quot;&gt;
    &lt;a href=&quot;/assets/images/image-filename-1-large.jpg&quot;&gt;&lt;img src=&quot;/assets/images/image-filename-1.jpg&quot;&gt;&lt;/a&gt;
    &lt;a href=&quot;/assets/images/image-filename-2-large.jpg&quot;&gt;&lt;img src=&quot;/assets/images/image-filename-2.jpg&quot;&gt;&lt;/a&gt;
    &lt;figcaption&gt;Caption describing these two images.&lt;/figcaption&gt;
&lt;/figure&gt;
```

And you&apos;ll get something that looks like this:

&lt;figure class=&quot;half&quot;&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.JPG&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot;&gt;&lt;/a&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpeg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot;&gt;&lt;/a&gt;
	&lt;figcaption&gt;Two images.&lt;/figcaption&gt;
&lt;/figure&gt;

#### Three Up

Apply the `third` class like so to display three images side by side that share the same caption.

```html
&lt;figure class=&quot;third&quot;&gt;
	&lt;img src=&quot;/images/image-filename-1.jpg&quot;&gt;
	&lt;img src=&quot;/images/image-filename-2.jpg&quot;&gt;
	&lt;img src=&quot;/images/image-filename-3.jpg&quot;&gt;
	&lt;figcaption&gt;Caption describing these three images.&lt;/figcaption&gt;
&lt;/figure&gt;
```

And you&apos;ll get something that looks like this:

&lt;figure class=&quot;third&quot;&gt;
	&lt;img src=&quot;http://placehold.it/600x300.jpg&quot;&gt;
	&lt;img src=&quot;http://placehold.it/600x300.jpg&quot;&gt;
	&lt;img src=&quot;http://placehold.it/600x300.jpg&quot;&gt;
	&lt;figcaption&gt;Three images.&lt;/figcaption&gt;
&lt;/figure&gt;</content><author><name>Michael Rose</name></author><category term="sample post" /><category term="images" /><category term="test" /><summary type="html">Examples and code for displaying images in posts.</summary></entry><entry><title type="html">Markup: HTML Tags and Formatting</title><link href="http://localhost:4444/markup/markup-html-tags-and-formatting/" rel="alternate" type="text/html" title="Markup: HTML Tags and Formatting" /><published>2013-01-11T00:00:00-05:00</published><updated>2013-01-11T00:00:00-05:00</updated><id>http://localhost:4444/markup/markup-html-tags-and-formatting</id><content type="html" xml:base="http://localhost:4444/markup/markup-html-tags-and-formatting/">A variety of common markup showing how the theme styles them.

## Header two

### Header three

#### Header four

##### Header five

###### Header six

## Blockquotes

Single line blockquote:

&gt; Stay hungry. Stay foolish.

Multi line blockquote with a cite reference:

&gt; People think focus means saying yes to the thing you&apos;ve got to focus on. But that&apos;s not what it means at all. It means saying no to the hundred other good ideas that there are. You have to pick carefully. I&apos;m actually as proud of the things we haven&apos;t done as the things I have done. Innovation is saying no to 1,000 things.

&lt;cite&gt;Steve Jobs&lt;/cite&gt; --- Apple Worldwide Developers&apos; Conference, 1997
{: .small}

## Tables

| Employee         | Salary |                                                              |
| --------         | ------ | ------------------------------------------------------------ |
| [John Doe](#)    | $1     | Because that&apos;s all Steve Jobs needed for a salary.           |
| [Jane Doe](#)    | $100K  | For all the blogging she does.                               |
| [Fred Bloggs](#) | $100M  | Pictures are worth a thousand words, right? So Jane × 1,000. |
| [Jane Bloggs](#) | $100B  | With hair like that?! Enough said.                           |

| Header1 | Header2 | Header3 |
|:--------|:-------:|--------:|
| cell1   | cell2   | cell3   |
| cell4   | cell5   | cell6   |
|-----------------------------|
| cell1   | cell2   | cell3   |
| cell4   | cell5   | cell6   |
|=============================|
| Foot1   | Foot2   | Foot3   |

## Definition Lists

Definition List Title
:   Definition list division.

Startup
:   A startup company or startup is a company or temporary organization designed to search for a repeatable and scalable business model.

#dowork
:   Coined by Rob Dyrdek and his personal body guard Christopher &quot;Big Black&quot; Boykins, &quot;Do Work&quot; works as a self motivator, to motivating your friends.

Do It Live
:   I&apos;ll let Bill O&apos;Reilly [explain](https://www.youtube.com/watch?v=O_HyZ5aW76c &quot;We&apos;ll Do It Live&quot;) this one.

## Unordered Lists (Nested)

  * List item one 
      * List item one 
          * List item one
          * List item two
          * List item three
          * List item four
      * List item two
      * List item three
      * List item four
  * List item two
  * List item three
  * List item four

## Ordered List (Nested)

  1. List item one 
      1. List item one 
          1. List item one
          2. List item two
          3. List item three
          4. List item four
      2. List item two
      3. List item three
      4. List item four
  2. List item two
  3. List item three
  4. List item four

## Forms

&lt;form&gt;
  &lt;fieldset&gt;
    &lt;legend&gt;Personalia:&lt;/legend&gt;
    Name: &lt;input type=&quot;text&quot; size=&quot;30&quot;&gt;&lt;br&gt;
    Email: &lt;input type=&quot;text&quot; size=&quot;30&quot;&gt;&lt;br&gt;
    Date of birth: &lt;input type=&quot;text&quot; size=&quot;10&quot;&gt;
  &lt;/fieldset&gt;
&lt;/form&gt;

## Buttons

Make any link standout more when applying the `.btn` class.

```html
&lt;a href=&quot;#&quot; class=&quot;btn--success&quot;&gt;Success Button&lt;/a&gt;
```

[Default Button](#){: .btn}
[Primary Button](#){: .btn .btn--primary}
[Success Button](#){: .btn .btn--success}
[Warning Button](#){: .btn .btn--warning}
[Danger Button](#){: .btn .btn--danger}
[Info Button](#){: .btn .btn--info}
[Inverse Button](#){: .btn .btn--inverse}
[Light Outline Button](#){: .btn .btn--light-outline}

```markdown
[Default Button Text](#link){: .btn}
[Primary Button Text](#link){: .btn .btn--primary}
[Success Button Text](#link){: .btn .btn--success}
[Warning Button Text](#link){: .btn .btn--warning}
[Danger Button Text](#link){: .btn .btn--danger}
[Info Button Text](#link){: .btn .btn--info}
[Inverse Button](#link){: .btn .btn--inverse}
[Light Outline Button](#link){: .btn .btn--light-outline}
```

[X-Large Button](#){: .btn .btn--primary .btn--x-large}
[Large Button](#){: .btn .btn--primary .btn--large}
[Default Button](#){: .btn .btn--primary }
[Small Button](#){: .btn .btn--primary .btn--small}

```markdown
[X-Large Button](#link){: .btn .btn--primary .btn--x-large}
[Large Button](#link){: .btn .btn--primary .btn--large}
[Default Button](#link){: .btn .btn--primary }
[Small Button](#link){: .btn .btn--primary .btn--small}
```

## Notices

**Watch out!** This paragraph of text has been [emphasized](#) with the `{: .notice}` class.
{: .notice}

**Watch out!** This paragraph of text has been [emphasized](#) with the `{: .notice--primary}` class.
{: .notice--primary}

**Watch out!** This paragraph of text has been [emphasized](#) with the `{: .notice--info}` class.
{: .notice--info}

**Watch out!** This paragraph of text has been [emphasized](#) with the `{: .notice--warning}` class.
{: .notice--warning}

**Watch out!** This paragraph of text has been [emphasized](#) with the `{: .notice--success}` class.
{: .notice--success}

**Watch out!** This paragraph of text has been [emphasized](#) with the `{: .notice--danger}` class.
{: .notice--danger}

## HTML Tags

### Address Tag

&lt;address&gt;
  1 Infinite Loop&lt;br /&gt; Cupertino, CA 95014&lt;br /&gt; United States
&lt;/address&gt;

### Anchor Tag (aka. Link)

This is an example of a [link](http://apple.com &quot;Apple&quot;).

### Abbreviation Tag

The abbreviation CSS stands for &quot;Cascading Style Sheets&quot;.

*[CSS]: Cascading Style Sheets

### Cite Tag

&quot;Code is poetry.&quot; ---&lt;cite&gt;Automattic&lt;/cite&gt;

### Code Tag

You will learn later on in these tests that `word-wrap: break-word;` will be your best friend.

### Strike Tag

This tag will let you &lt;strike&gt;strikeout text&lt;/strike&gt;.

### Emphasize Tag

The emphasize tag should _italicize_ text.

### Insert Tag

This tag should denote &lt;ins&gt;inserted&lt;/ins&gt; text.

### Keyboard Tag

This scarcely known tag emulates &lt;kbd&gt;keyboard text&lt;/kbd&gt;, which is usually styled like the `&lt;code&gt;` tag.

### Preformatted Tag

This tag styles large blocks of code.

&lt;pre&gt;
.post-title {
	margin: 0 0 5px;
	font-weight: bold;
	font-size: 38px;
	line-height: 1.2;
	and here&apos;s a line of some really, really, really, really long text, just to see how the PRE tag handles it and to find out how it overflows;
}
&lt;/pre&gt;

### Quote Tag

&lt;q&gt;Developers, developers, developers&amp;#8230;&lt;/q&gt; &amp;#8211;Steve Ballmer

### Strong Tag

This tag shows **bold text**.

### Subscript Tag

Getting our science styling on with H&lt;sub&gt;2&lt;/sub&gt;O, which should push the &quot;2&quot; down.

### Superscript Tag

Still sticking with science and Albert Einstein&apos;s E = MC&lt;sup&gt;2&lt;/sup&gt;, which should lift the 2 up.

### Variable Tag

This allows you to denote &lt;var&gt;variables&lt;/var&gt;.</content><author><name>Michael Rose</name></author><category term="Markup" /><category term="content" /><category term="css" /><category term="formatting" /><category term="html" /><category term="markup" /><summary type="html">A variety of common markup showing how the theme styles them.</summary></entry></feed>